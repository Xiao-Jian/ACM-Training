O(n^2):
#include <iostream>
using namespace std;

const int N = 1000;
int a[N];
int g[N];

int main ()
{
    int n;
    while ( cin >> n )
    {
        for ( int i = 0; i < n; i++ ) 
        {
            cin >> a[i];
            g[i] = 1;
        }
        int ans = g[0];
        for ( int i = 1; i < n; i++ )
        {
            for ( int j = 0; j < i; j++ )
            {
                if ( a[j] >= a[i] ) continue;
                if ( g[j] + 1 > g[i] ) g[i] = g[j] + 1;
            }
            if ( g[i] > ans ) ans = g[i];
        }
        cout << ans << endl;
    }
    return 0;
}

O(nlogn):
#include <algorithm>
#include <iostream>
using namespace std;

const int INF = 1 << 29;
const int N = 1000;
int s[N];
int top;

int main ()
{
    int n;
    while ( cin >> n )
    {
        top = 0;
        s[top++] = INF;
        for ( int i = 0; i < n; i++ ) 
        {
            int tmp;
            cin >> tmp;
            if ( tmp > s[top - 1] )
            {
                s[top++] = tmp;
            }
            else
            {
                int pos = upper_bound( s, s + top, tmp ) - s;
                s[pos] = tmp;
            }
        }
        cout << top << endl;
    }
    return 0;
}
